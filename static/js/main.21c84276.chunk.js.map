{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfiled","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CounterButton","updateCount","count","nextProps","nextState","console","log","color","onClick","Header","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","React","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.21c84276.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Card = ({ name, email, id }) => {\n\treturn (\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={robots[i].id}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n            />\n          )\n        })\n      }\n    </div>\n  )\n};\n\nexport default CardList;","import React from 'react';\n\n\nconst SearchBox = ({ searchfiled, searchChange }) => {\n  return (\n    <div>\n      <input\n        className='pa3 ma3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflowY: 'scroll', border: '5px solid black', height: '800px' }}>\n      {props.children}\n    </div>\n  )\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true })\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oooops. This is not good</h1>\n    }\n    return this.props.children\n  }\n};\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n  constructor() {\n    super();\n    this.state = {\n      count: 0\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.count !== nextState.count) {\n      return true\n    }\n    return false\n  }\n\n  updateCount = () => {\n    this.setState(state => {\n      return { count: this.state.count + 1 }\n    })\n  }\n\n  render() {\n    console.log(this.props.color);\n    return (\n      // <button className={this.props.color} onClick={this.updateCount}>\n\n      <button className={this.props.color + \" f8 grow no-underline br-pill ba bw1 ph4 pv3 mb2 dib\"} onClick={this.updateCount} >\n        Count: { this.state.count}\n      </button >\n    );\n  }\n}\n\nexport default CounterButton;\n","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n  // shouldComponentUpdate(nextProps, nextState) {\n  //   return false;\n  // }\n\n  render() {\n    return (\n      <div>\n        <h1 className='f1'>RoboFriends</h1>\n        <CounterButton color={'mid-gray'} />\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry'\nimport Header from '../components/Header'\nimport './App.css';\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobots: state.requestRobots.robots,\n\t\tisPending: state.requestRobots.isPending,\n\t\terror: state.requestRobots.error\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: () => dispatch(requestRobots())\n\t}\n}\n\nclass App extends React.Component {\n\tcomponentDidMount() {\n\t\tthis.props.onRequestRobots();\n\t}\n\n\trender() {\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\n\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t})\n\t\tif (isPending) {\n\t\t\treturn <h1 className='tc'>Loading</h1>\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<div className='tc'>\n\t\t\t\t\t<Header />\n\t\t\t\t\t<SearchBox searchChange={onSearchChange} />\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from './constants.js'\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from './constants.js'\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true })\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, { robots: action.payload, isPending: false })\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, { error: action.payload, isPending: false })\n    default:\n      return state;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers.js';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store =\n  createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}